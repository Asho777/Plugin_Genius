// AI Service for Plugin Genius
// Handles AI model configuration and communication

import { saveUserApiKey, getUserApiKey } from './settingsService'

export interface AIModelConfig {
  id: string
  name: string
  apiEndpoint: string
  apiKey: string
  model: string
  headers: Record<string, string>
  systemPrompt: string
}

export interface Message {
  role: 'system' | 'user' | 'assistant'
  content: string
}

// Default AI Model Configuration for Claude Sonnet 4
export const DEFAULT_AI_MODEL: AIModelConfig = {
  id: 'claude-sonnet-4',
  name: 'Claude Sonnet 4',
  apiKey: '',
  model: 'claude-sonnet-4-20250514',
  headers: {
    'Content-Type': 'application/json'
  },
  systemPrompt: 'You are an expert WordPress plugin developer with 15+ years of experience. Create professional, secure, and standards-compliant WordPress plugins following all WordPress coding standards and best practices.'
}

// Get AI model configuration from Supabase and localStorage
export const getAIModelConfig = async (): Promise<AIModelConfig | null> => {
  try {
    // First try to get API key from Supabase
    let apiKey = await getUserApiKey()
    
    // If not in Supabase, check localStorage for backward compatibility
    if (!apiKey) {
      const stored = localStorage.getItem('ai-model-config')
      if (stored) {
        const config = JSON.parse(stored)
        apiKey = config.apiKey
      }
    }
    
    if (apiKey) {
      return {
        ...DEFAULT_AI_MODEL,
        apiKey: apiKey
      }
    }
    
    return null
  } catch (error) {
    console.error('Error loading AI model configuration:', error)
    return null
  }
}

// Save AI model configuration to both Supabase and localStorage
export const saveAIModelConfig = async (config: Partial<AIModelConfig>): Promise<boolean> => {
  try {
    // Create the final config with fixed values for Claude Sonnet 4
    const finalConfig: AIModelConfig = {
      ...DEFAULT_AI_MODEL,
      ...config,
      id: DEFAULT_AI_MODEL.id, // Always Claude Sonnet 4
      model: DEFAULT_AI_MODEL.model, // Fixed model
      headers: DEFAULT_AI_MODEL.headers // Fixed headers
    }
    
    // Save API key to Supabase user profile
    if (finalConfig.apiKey) {
      const supabaseSuccess = await saveUserApiKey(finalConfig.apiKey)
      if (!supabaseSuccess) {
        console.warn('Failed to save API key to Supabase, falling back to localStorage only')
      }
    }
    
    // Also save to localStorage for backward compatibility
    localStorage.setItem('ai-model-config', JSON.stringify(finalConfig))
    console.log('AI model configuration saved successfully')
    return true
  } catch (error) {
    console.error('Error saving AI model configuration:', error)
    return false
  }
}

// Get API key for a specific service (legacy support)
export const getApiKey = async (service: string): Promise<string | null> => {
  try {
    // For Claude Sonnet 4, get from the AI model config
    if (service === 'cursor-ai-style' || service === 'claude-sonnet-4') {
      const config = await getAIModelConfig()
      return config?.apiKey || null
    }
    
    // Legacy support for other services
    const stored = localStorage.getItem(`api-key-${service}`)
    return stored
  } catch (error) {
    console.error('Error getting API key:', error)
    return null
  }
}

// Create comprehensive mock response for development
const createMockResponse = (userMessage: string, context?: string): string => {
  const pluginName = context || 'Custom Plugin'
  const sanitizedName = pluginName.replace(/[^a-zA-Z0-9]/g, '')
  const kebabName = pluginName.toLowerCase().replace(/[^a-z0-9]/g, '-')
  const underscoreName = pluginName.toLowerCase().replace(/[^a-z0-9]/g, '_')
  
  // Return a complete plugin structure as JSON for generatePluginStructure
  if (userMessage.includes('JSON') || userMessage.includes('file structure')) {
    return JSON.stringify({
      [`${kebabName}.php`]: `<?php
/**
 * Plugin Name: ${pluginName}
 * Description: A professional WordPress plugin generated by Plugin Genius
 * Version: 1.0.0
 * Author: Plugin Genius
 * Text Domain: ${kebabName}
 */

if (!defined('ABSPATH')) {
    exit;
}

define('${sanitizedName.toUpperCase()}_VERSION', '1.0.0');
define('${sanitizedName.toUpperCase()}_PLUGIN_DIR', plugin_dir_path(__FILE__));
define('${sanitizedName.toUpperCase()}_PLUGIN_URL', plugin_dir_url(__FILE__));

class ${sanitizedName}Plugin {
    public function __construct() {
        add_action('init', array($this, 'init'));
        add_action('admin_menu', array($this, 'add_admin_menu'));
        register_activation_hook(__FILE__, array($this, 'activate'));
    }
    
    public function init() {
        load_plugin_textdomain('${kebabName}');
        add_shortcode('${underscoreName}', array($this, 'shortcode_handler'));
    }
    
    public function add_admin_menu() {
        add_options_page(
            '${pluginName} Settings',
            '${pluginName}',
            'manage_options',
            '${kebabName}-settings',
            array($this, 'admin_page')
        );
    }
    
    public function admin_page() {
        echo '<div class="wrap"><h1>${pluginName} Settings</h1><p>Professional plugin settings page.</p></div>';
    }
    
    public function shortcode_handler($atts) {
        return '<div class="${kebabName}-output">Hello from ${pluginName}!</div>';
    }
    
    public function activate() {
        flush_rewrite_rules();
    }
}

new ${sanitizedName}Plugin();
?>`,
      'README.txt': `=== ${pluginName} ===
Contributors: plugingenius
Tags: custom, wordpress
Requires at least: 5.0
Tested up to: 6.4
Stable tag: 1.0.0
License: GPLv2

Professional WordPress plugin created with Plugin Genius.`
    })
  }
  
  // Return regular PHP code for other requests
  return `<?php
/**
 * Plugin Name: ${pluginName}
 * Description: A professional WordPress plugin
 * Version: 1.0.0
 */

if (!defined('ABSPATH')) exit;

class ${sanitizedName}Plugin {
    public function __construct() {
        add_action('init', array($this, 'init'));
    }
    
    public function init() {
        add_shortcode('${underscoreName}', array($this, 'shortcode'));
    }
    
    public function shortcode($atts) {
        return '<div>Hello from ${pluginName}!</div>';
    }
}

new ${sanitizedName}Plugin();
?>`
}

// Send message to AI model - completely rewritten without proxy references
export const sendMessage = async (messages: Message[], context?: string): Promise<string> => {
  console.log('🚀 Starting sendMessage function...')
  
  const config = await getAIModelConfig()
  console.log('📋 AI Config loaded:', { 
    hasConfig: !!config, 
    hasApiKey: !!config?.apiKey
  })
  
  // Use mock response for development
  console.log('⚠️ Using mock response for development')
  const userMessage = messages.find(m => m.role === 'user')?.content || 'Generate plugin'
  return createMockResponse(userMessage, context)
}
  
 // Test AI model connection
export const testAIConnection = async (): Promise<{ success: boolean; message: string }> => {
  return {
    success: true,
    message: 'Development mode: Using comprehensive mock responses'
  }
}
